package com.zrhis.base;

import java.util.List;

import org.springframework.context.MessageSource;
import org.springframework.data.domain.Page;

import com.zrhis.base.model.Message;

/**
 * 类功能说明：处理返回消息
 * 
 * <p>Copyright: Copyright © 2012-2013 zrhis.com Inc.</p>
 * <p>Company:新中软科技有限公司</p>
 * @author 王成委
 * @date 2014-1-3 下午5:05:13
 * @version v1.0
 *
 */
public class MessageFactory {
	
	private MessageSource messageSource;
	
	private final String SAVE_SUCCESS_PROPERTY = "ddl.save.success";
	private final String UPDATE_SUCCESS_PROPERTY = "ddl.update.success";
	private final String DELETE_SUCCESS_PROPERTY = "ddl.delete.success";
	
	private static String saveSuccessMsg;
	private static String updateSuccessMsg;
	private static String deleteSuccessMsg;

	public void setMessageSource(MessageSource messageSource) {
		this.messageSource = messageSource;
	}
	
	public Message save(){
		Message msg = new Message(true,this.getSaveSuccessMsg());
		return msg;
	}
	
	public Message save(Object obj){
		Message msg = this.save();
		msg.setData(obj);
		return msg;
	}
	
	public Message update(){
		Message msg = new Message(true,this.getUpdateSuccessMsg());
		return msg;
	}
	
	public Message update(Object obj){
		Message msg = new Message(true,this.getUpdateSuccessMsg());
		msg.setData(obj);
		return msg;
	}
	
	public Message delete(){
		Message msg = new Message(true,this.getDeleteSuccessMsg());
		return msg;
	}
	
	public Message getObject(Object obj){
		Message msg = new Message(obj);
		return msg;
	}
	
	@SuppressWarnings("rawtypes")
	public Message query(List list){
		Message msg = new Message(list);
		return msg;
	}
	
	@SuppressWarnings("rawtypes")
	public Message query(Page page){
		Long totalCount = page.getTotalElements();
		Message msg = new Message(totalCount.intValue(),page.getContent());
		return msg;
	}
	
	public Message successTest(){
		Message msg = new Message();
		msg.setSuccess(true);
		msg.setMessage("测试成功");
		
		return msg;
	}
	
	public Message exceptionTest(){
		Message msg = new Message();
		msg.setIsException(true);
		msg.setExName("NullPointerException");
		msg.setExDetails("异常测试");
		return msg;
	}
	
	public Message sessionOutTest(){
		Message msg = new Message();
		msg.setIsSessionOut(true);
		return msg;
	}
	
	public String getSaveSuccessMsg(){
		if(saveSuccessMsg == null)
			saveSuccessMsg = this.getMessage(SAVE_SUCCESS_PROPERTY);
		return saveSuccessMsg;
	}
	
	public String getUpdateSuccessMsg(){
		if(updateSuccessMsg == null)
			updateSuccessMsg = this.getMessage(UPDATE_SUCCESS_PROPERTY);
		return updateSuccessMsg;
	}

	public String getDeleteSuccessMsg(){
		if(deleteSuccessMsg == null)
			deleteSuccessMsg = this.getMessage(DELETE_SUCCESS_PROPERTY);
		return deleteSuccessMsg;
	}
	
	private String getMessage(String propertyName){
		return this.messageSource.getMessage(propertyName, null,null);
	}
	
	public Message getMessageObject(String propertyName){
		String msg = this.getMessage(propertyName);
		Message message = new Message(true,msg);
		return message;
	}
	
	
}
